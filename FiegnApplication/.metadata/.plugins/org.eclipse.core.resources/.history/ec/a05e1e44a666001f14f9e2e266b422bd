package com.train.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.train.entity.Passenger;
import com.train.entity.Ticket;
import com.train.exception.TicketNotFoundException;
import com.train.model.PassangerModel;
import com.train.model.TicketModel;
import com.train.repositiory.PassangerRepositiory;
import com.train.repositiory.TrainRepositiory;

@Service
public class TicketService implements ITicketService {

	private TrainRepositiory ticketRepository;

	private PassangerRepositiory passengerRepository;

	private Map<String, Ticket> tickmap = new HashMap<>();

	@Autowired
	public void setTicketRepository(TrainRepositiory ticketRepository) {
		this.ticketRepository = ticketRepository;
	}

	@Autowired
	public void setPassengerRepository(PassangerRepositiory passengerRepository) {
		this.passengerRepository = passengerRepository;
	}

	@Override
	public TicketModel bookTicket(PassangerModel passangerModel) {

		Passenger passenger = new Passenger();
		String name = passangerModel.getName();
		passenger.setName(name);
		passenger.setSource(passangerModel.getSource());
		passenger.setJourneyDate(passangerModel.getJourneyDate());
		passenger.setDestination(passangerModel.getDestination());
		passenger.setTrainNumber(passangerModel.getTrainNumber());
		Passenger savedPassenger = passengerRepository.save(passenger);

		String pnr = "";
		for (int i = 0; i < 10; i++) {
			pnr += (int) (Math.random() * 10);
		}

		Ticket ticket = new Ticket();

		ticket.setName(savedPassenger.getName());
		ticket.setSource(savedPassenger.getSource());
		ticket.setJourneyDate(savedPassenger.getJourneyDate());

		ticket.setDestination(savedPassenger.getDestination());
		ticket.setPnr(pnr);
		ticket.setTicketStatus("confirmed");
		ticket.setTrainNumber(savedPassenger.getTrainNumber());

		Ticket savedTicket = ticketRepository.save(ticket);

		TicketModel ticketModel = new TicketModel();
		ticketModel.setTicketId(savedTicket.getTickedId());
		ticketModel.setName(savedTicket.getName());
		ticketModel.setJourneyDate(savedTicket.getJourneyDate());
		ticketModel.setSource(savedTicket.getSource());
		ticketModel.setDestination(savedTicket.getDestination());
		ticketModel.setPnr(savedTicket.getPnr());
		ticketModel.setTicketStatus(savedTicket.getTicketStatus());
		ticketModel.setTrainNumber(savedTicket.getTrainNumber());

		return ticketModel;
	}

	@Override
	public TicketModel getTicketByPnr(String pnr) throws TicketNotFoundException {

		Ticket ticket = ticketRepository.getTicketByPR(pnr);

		if (ticket == null) {
			throw new TicketNotFoundException("No Ticket found with this PNR: " + pnr);
		}
		TicketModel ticketModel = new TicketModel();
		ticketModel.setTicketId(ticket.getTickedId());
		ticketModel.setName(ticket.getName());
		ticketModel.setSource(ticket.getSource());
		ticketModel.setDestination(ticket.getDestination());
		ticketModel.setJourneyDate(ticket.getJourneyDate());
		ticketModel.setPnr(ticket.getPnr());
		ticketModel.setTicketStatus(ticket.getTicketStatus());
		ticketModel.setTrainNumber(ticket.getTrainNumber());

		return ticketModel;
	}

	@Override
	public Ticket updateTicket(Passenger passenger, String ticketId) {
		Ticket existingticket = null;

		Optional<Ticket> byId = ticketRepository.findById(ticketId);
		if (byId.isPresent()) {
			existingticket = byId.get();
			existingticket.setSource(passenger.getSource());
			existingticket.setDestination(passenger.getDestination());
			existingticket.setName(passenger.getName());
			existingticket.setTrainNumber(passenger.getTrainNumber());
		}

		else {
			throw new TicketNotFoundException("No Ticket found with this " + ticketId);
		}
		ticketRepository.save(existingticket);

		return existingticket;
	}

//	

	@Override
	public String deleteTicket(String ticketId) throws TicketNotFoundException {

		if (!ticketRepository.existsById(ticketId)) {
			throw new TicketNotFoundException("No Ticket available with ID: " + ticketId);
		}

		ticketRepository.deleteById(ticketId);
		return "Ticket with ID " + ticketId + " successfully deleted.";

	}

	@Override
	public List<TicketModel> getAlltickets() throws TicketNotFoundException {
		List<Ticket> allTickets = ticketRepository.findAll();
		if (allTickets.isEmpty()) {
			throw new TicketNotFoundException("No tickets available");
		}

		List<TicketModel> ticketModels = new ArrayList<>();
		for (Ticket ticket : allTickets) {
			TicketModel ticketModel = new TicketModel();
			ticketModel.setTicketId(ticket.getTickedId());
			ticketModel.setName(ticket.getName());
			ticketModel.setSource(ticket.getSource());
			ticketModel.setDestination(ticket.getDestination());
			ticketModel.setJourneyDate(ticket.getJourneyDate());
			ticketModel.setPnr(ticket.getPnr());
			ticketModel.setTicketStatus(ticket.getTicketStatus());
			ticketModel.setTrainNumber(ticket.getTrainNumber());

			ticketModels.add(ticketModel);
		}

		return ticketModels;
	}

}
